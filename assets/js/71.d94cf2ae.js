(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{482:function(t,a,r){"use strict";r.r(a);var v=r(2),s=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),a("h1",{attrs:{id:"单例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[t._v("#")]),t._v(" 单例")]),t._v(" "),a("p",[a("img",{attrs:{src:"img.png",alt:"img.png"}})]),t._v(" "),a("h2",{attrs:{id:"aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),a("p",[t._v("面向切面编程\nSpring管理的事务 底层用的就是AOP，AOP 的底层用的是动态代理\n使用场景")]),t._v(" "),a("p",[t._v("● 记录操作日志\n● 缓存处理\n● Spring中内置的事务处理")]),t._v(" "),a("h2",{attrs:{id:"事务失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务失效"}},[t._v("#")]),t._v(" 事务失效")]),t._v(" "),a("p",[t._v("● 异常捕获处理")]),t._v(" "),a("p",[t._v("● 抛出检查异常")]),t._v(" "),a("p",[t._v("● 非public方法")]),t._v(" "),a("h2",{attrs:{id:"bean-的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期"}},[t._v("#")]),t._v(" Bean 的生命周期")]),t._v(" "),a("ul",[a("li",[t._v("实例化：")]),t._v(" "),a("li",[t._v("设置属性(Bean注入和装配)")]),t._v(" "),a("li",[t._v("初始化：")]),t._v(" "),a("li",[t._v("使用：")]),t._v(" "),a("li",[t._v("销毁：")])]),t._v(" "),a("h2",{attrs:{id:"循环引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环引用"}},[t._v("#")]),t._v(" 循环引用")]),t._v(" "),a("p",[t._v("三级缓存解决循环依赖")]),t._v(" "),a("h2",{attrs:{id:"springmvc的执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的执行流程"}},[t._v("#")]),t._v(" SpringMVC的执行流程")]),t._v(" "),a("ul",[a("li",[t._v("用户发送出请求到前端控制器dispatcherservlet")]),t._v(" "),a("li",[t._v("dispatcherservlet收到请求调用handlermapping(处理器映射器）")]),t._v(" "),a("li",[t._v("handlermapping找到具体的处理器，生成处理器对象及处理器拦截器（如果有）,再一起返\n回给dispatcherservlet.")]),t._v(" "),a("li",[t._v("dispatcherservlet调用handleradapter (处理器适配器）")]),t._v(" "),a("li",[t._v("handleradapter/controller)")]),t._v(" "),a("li",[t._v("方法上添加了@responsebody")]),t._v(" "),a("li",[t._v("通过httpmessageconverter来返回结果转换为json并响应")])]),t._v(" "),a("h2",{attrs:{id:"springboot-自动配置原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot-自动配置原理"}},[t._v("#")]),t._v(" SpringBoot 自动配置原理")]),t._v(" "),a("p",[t._v("三个注解")]),t._v(" "),a("ul",[a("li",[t._v("@SpringBootApplication")]),t._v(" "),a("li",[t._v("@EnableAutoConfiguration")]),t._v(" "),a("li",[t._v("@ComponentScan\n核心注解 @EnableAutoConfiguration")]),t._v(" "),a("li",[t._v("@EnableAutoConfiguration会扫描META-INF/spring.factories文件，里面配置了所有需要自动配置的bean。")]),t._v(" "),a("li",[t._v("根据条件注解所制定的条件决定是否需要导入到spring容器中。")])]),t._v(" "),a("h2",{attrs:{id:"mybatis执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis执行流程"}},[t._v("#")]),t._v(" Mybatis执行流程")]),t._v(" "),a("ul",[a("li",[t._v("读取mybatis配置文件：mybatis-config.xml加载运行环境和映射文件")]),t._v(" "),a("li",[t._v("构造会话工厂sqlsessionfactory")]),t._v(" "),a("li",[t._v("会话工厂创建sqlsession对象（包含了执行sql语句的所有方法）")]),t._v(" "),a("li",[t._v("操作数据库的接口，executor执行器，同时负责查询缓存的维护")]),t._v(" "),a("li",[t._v("executor接口的执行方法中有一个mappedstatement类型的参数，封装了映射信息")]),t._v(" "),a("li",[t._v("输入参数映射")]),t._v(" "),a("li",[t._v("输出结果映射")])])])}),[],!1,null,null,null);a.default=s.exports}}]);