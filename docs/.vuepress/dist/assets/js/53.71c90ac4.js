(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{464:function(e,t,a){"use strict";a.r(t);var l=a(2),s=Object(l.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"工作常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作常用方法"}},[e._v("#")]),e._v(" 工作常用方法")]),e._v(" "),t("h2",{attrs:{id:"java8-stream流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java8-stream流"}},[e._v("#")]),e._v(" Java8 stream流")]),e._v(" "),t("p",[e._v("根据stream流分组 统计 排序 求和 过滤 去重")]),e._v(" "),t("p",[e._v("List"),t("IastLoopholeResultDetail",[e._v(" loopholeResultDetailList = new ArrayList"),t("IastLoopholeResultDetail",[e._v("();")])],1)],1),e._v(" "),t("h3",{attrs:{id:"分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[e._v("#")]),e._v(" 分组")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("       loopholeResultDetailList.stream().collect(Collectors.groupingBy(IastLoopholeResultDetail::getLanguage));\n")])])]),t("h3",{attrs:{id:"统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#统计"}},[e._v("#")]),e._v(" 统计")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Map<String, Long> countMap = loopholeResultDetailList.stream().collect(Collectors.groupingBy(IastLoopholeResultDetail::getLanguage, Collectors.counting()));\n")])])]),t("h3",{attrs:{id:"排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[e._v("#")]),e._v(" 排序")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("List<IastLoopholeResultDetail> sortedList = loopholeResultDetailList.stream().sorted(Comparator.comparing(IastLoopholeResultDetail::getLanguage)).collect(Collectors.toList());\n")])])]),t("h3",{attrs:{id:"求和"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#求和"}},[e._v("#")]),e._v(" 求和")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("long count = loopholeResultDetailList.stream().count();\n")])])]),t("h3",{attrs:{id:"过滤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤"}},[e._v("#")]),e._v(" 过滤")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('List<IastLoopholeResultDetail> filteredList = loopholeResultDetailList.stream().filter(item -> item.getLanguage().equals("Java")).collect(Collectors.toList());\n')])])]),t("h3",{attrs:{id:"去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#去重"}},[e._v("#")]),e._v(" 去重")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("List<IastLoopholeResultDetail> distinctList = loopholeResultDetailList.stream().distinct().collect(Collectors.toList());\n")])])]),t("h2",{attrs:{id:"文件io"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件io"}},[e._v("#")]),e._v(" 文件io")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' public static void readFile(String filePath) {\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new FileReader(filePath));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (FileNotFoundException e) {\n            System.out.println("文件未找到，请检查文件路径。");\n        } catch (IOException e) {\n            System.out.println("发生错误：" + e.getMessage());\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                System.out.println("关闭文件时发生错误：" + e.getMessage());\n            }\n        }\n    }\n')])])]),t("h2",{attrs:{id:"上传文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上传文件"}},[e._v("#")]),e._v(" 上传文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("private File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {\n File file = new File(multipartFile.getOriginalFilename());\n        FileUtils.writeByteArrayToFile(file, multipartFile.getBytes());\n        return file;\n")])])]),t("p",[e._v("我们首先创建一个File对象，使用MultipartFile的getOriginalFilename方法获取文件名，\n并作为参数传递给File的构造函数。然后，我们使用FileUtils.writeByteArrayToFile方法将MultipartFile的内容写入到File对象中。最后，我们返回这个File对象。")]),e._v(" "),t("h2",{attrs:{id:"导入导出excel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入导出excel"}},[e._v("#")]),e._v(" 导入导出Excel")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public static void exportExcel(List<Object[]> dataList, String sheetName, String fileName) {\n        try {\n            // 创建工作簿\n            HSSFWorkbook workbook = new HSSFWorkbook();\n            // 创建工作表\n            HSSFSheet sheet = workbook.createSheet(sheetName);\n            // 创建表头样式\n            HSSFCellStyle headStyle = workbook.createCellStyle();\n            // 设置表头样式\n            headStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n            headStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);\n            // 创建表头\n            HSSFRow headRow = sheet.createRow(0);\n            // 设置表头内容\n            headRow.createCell(0).setCellValue("姓名");\n            headRow.createCell(1).setCellValue("年龄");\n            headRow.createCell(2).setCellValue("性别");\n            // 设置表头样式\n            for (int i = 0; i < 3; i++) {\n                HSSFCell cell = headRow.getCell(i);\n                cell.setCellStyle(headStyle);\n            }\n            // 创建数据样式\n            HSSFCellStyle dataStyle = workbook.createCellStyle();\n            // 设置数据样式\n            dataStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n            dataStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);\n            // 写入数据\n            for (int i = 0; i < dataList.size(); i++) {\n                Object[] data = dataList.get(i);\n                HSSFRow dataRow = sheet.createRow(i + 1);\n                dataRow.createCell(0).setCellValue((String) data[0]);\n                dataRow.createCell(1).setCellValue((Integer) data[1]);\n                dataRow.createCell(2).setCellValue((String) data[2]);\n                // 设置数据样式\n                for (int j = 0; j < 3; j++) {\n                    HSSFCell cell = dataRow.getCell(j);\n                    cell.setCellStyle(dataStyle);\n                }\n                }\n            // 保存文件\n            FileOutputStream outputStream = new FileOutputStream(fileName);\n            workbook.write(outputStream);\n            outputStream.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n')])])]),t("p",[e._v("我们首先创建一个HSSFWorkbook对象，创建一个HSSFSheet对象，创建一个表头样式和数据样式。然后，我们创建表头和数据，并设置样式。最后，我们写入数据，保存文件。")]),e._v(" "),t("h2",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[e._v("#")]),e._v(" 正则表达式")]),e._v(" "),t("p",[e._v("\\d 匹配任意数字，\n\\w 匹配任意字母或数字，\n\\s 匹配任意空白字符，\n. 匹配任意字符，* 匹配0个或多个，+ 匹配1个或多个，? 匹配0个或1个，{n} 匹配n个，{n,} 匹配n个或更多，{n,m} 匹配n-m个。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String regex = "";\nPattern pattern =Pattern.compile(regex);\nMatcher matcher =pattern.matcher(regex);\nif(matcher.find()){\n//打印匹配到的字符\n}\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);