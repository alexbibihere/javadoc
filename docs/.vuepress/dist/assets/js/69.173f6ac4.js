(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{480:function(t,s,a){"use strict";a.r(s);var r=a(2),i=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"list中arraylist和linkedlist的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list中arraylist和linkedlist的区别"}},[t._v("#")]),t._v(" List中ArrayList和LinkedList的区别")]),t._v(" "),s("h2",{attrs:{id:"_1-存储位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-存储位置"}},[t._v("#")]),t._v(" 1. 存储位置")]),t._v(" "),s("p",[t._v("ArrayList和LinkedList都是List接口的实现类，但是两者的存储位置不同。")]),t._v(" "),s("p",[t._v("ArrayList是基于数组实现的，底层是数组，可以随机访问元素，但是插入和删除元素效率低，因为需要移动元素。")]),t._v(" "),s("p",[t._v("LinkedList是基于链表实现的，底层是链表，只能顺序访问元素，但是插入和删除元素效率高，因为不需要移动元素。")]),t._v(" "),s("h2",{attrs:{id:"_2-线程安全性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程安全性"}},[t._v("#")]),t._v(" 2. 线程安全性")]),t._v(" "),s("p",[t._v("ArrayList不是线程安全的，因为它对数组的操作不是原子性的，可能会导致数据不一致。")]),t._v(" "),s("p",[t._v("LinkedList是线程安全的，因为它对链表的操作是原子性的，不会导致数据不一致。")]),t._v(" "),s("h2",{attrs:{id:"_3-内存占用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-内存占用"}},[t._v("#")]),t._v(" 3. 内存占用")]),t._v(" "),s("p",[t._v("ArrayList的内存占用是固定的，因为它底层是数组，数组的大小是固定的，不会随着元素的增加而增加。")]),t._v(" "),s("p",[t._v("LinkedList的内存占用是可变的，因为它底层是链表，链表的大小是可变的，随着元素的增加而增加。")]),t._v(" "),s("h2",{attrs:{id:"_4-选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-选择"}},[t._v("#")]),t._v(" 4. 选择")]),t._v(" "),s("p",[t._v("一般情况下，如果需要频繁的插入和删除元素，建议使用LinkedList，因为它具有更高的效率。")]),t._v(" "),s("p",[t._v("如果需要频繁的随机访问元素，建议使用ArrayList，因为它具有更高的效率。")]),t._v(" "),s("p",[t._v("如果需要线程安全的操作，建议使用LinkedList，因为它具有更高的效率。")]),t._v(" "),s("p",[t._v("如果需要快速的内存占用，建议使用ArrayList，因为它具有更高的效率。")])])}),[],!1,null,null,null);s.default=i.exports}}]);